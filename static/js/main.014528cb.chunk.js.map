{"version":3,"sources":["redux/reducers/index.js","redux/store.js","Components/Header/HeaderMain.js","Components/Footer/FooterMain.js","Components/Template.js","Components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["combineReducers","middleware","thunk","composeEnhancers","composeWithDevTools","trace","traceLimit","store","createStore","rootReducer","applyMiddleware","HeaderMain","className","FooterMain","Template","props","content","Main","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAEeA,4BAAgB,ICKlBC,EAAa,CAACC,KAErBC,EAAmBC,8BAAoB,CAC3CC,OAAO,EACPC,WAAY,KAUCC,EANDC,sBACbC,EAXoB,GAapBN,EAAiBO,kBAAe,WAAf,EAAmBT,K,uBCNtBU,MAVf,WACC,OACC,gCACC,yBAAKC,UAAU,eAAf,iBCOYC,MAVf,WACC,OACC,gCACC,yBAAKD,UAAU,eAAf,iBCWYE,MAXf,SAAkBC,GAAQ,IACjBC,EAAYD,EAAZC,QACR,OACC,yBAAKJ,UAAU,gBACd,kBAAC,EAAD,MACCI,EACD,kBAAC,EAAD,QCCYC,MARf,WACC,OACC,6BACC,kBAAC,EAAD,CAAUD,QAAS,uCCmBPE,MAZf,WACC,OACC,kBAAC,IAAD,CAAUX,MAAOA,GAChB,kBAAC,IAAD,CAAQY,SAAS,KAChB,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,UAAWL,QCPpBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.014528cb.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\nexport default combineReducers({\n})","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nexport const middleware = [thunk];\n\nconst composeEnhancers = composeWithDevTools({\n  trace: true,\n  traceLimit: 25,\n})\n\n// Enable action trace for easier debug\nconst store = createStore(\n\trootReducer, \n\tinitialState,\n\tcomposeEnhancers(applyMiddleware(...middleware))\n);\n\nexport default store;","import React from 'react';\n\nfunction HeaderMain() {\n\treturn(\n\t\t<header>\n\t\t\t<div className='site-header'>\n\t\t\t\tSite header\n\t\t\t</div>\n\t\t</header>\n\t)\n}\n\nexport default HeaderMain","import React from 'react';\n\nfunction FooterMain() {\n\treturn(\n\t\t<footer>\n\t\t\t<div className='site-footer'>\n\t\t\t\tSite footer\n\t\t\t</div>\n\t\t</footer>\n\t)\n}\n\nexport default FooterMain","import React from 'react';\n\nimport HeaderMain from './Header/HeaderMain';\nimport FooterMain from './Footer/FooterMain';\n\nfunction Template(props) {\n\tconst { content } = props;\n\treturn(\n\t\t<div className=\"site-wrapper\">\n\t\t\t<HeaderMain />\n\t\t\t{content}\n\t\t\t<FooterMain />\n\t\t</div>\n\t)\n}\n\nexport default Template","import React from 'react';\n\nimport Template from '../Template';\n\nfunction Main() {\n\treturn (\n\t\t<div>\n\t\t\t<Template content={<div>Hi</div>}/>\n\t\t</div>\n\t)\n}\n\nexport default Main","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport './AppStyle.css';\n\nimport {\n\tHashRouter as Router,\n\tSwitch,\n\tRoute,\n} from \"react-router-dom\";\n\nimport Main from './Components/Main/Main';\n\nfunction App() {\n\treturn(\n\t\t<Provider store={store}>\n\t\t\t<Router basename=\"/\">\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path={'/'} component={Main} />\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t</Provider>\n\t)\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}